<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>  
<#@ Assembly Name="System.Xml.Linq.dll" #>  
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#+
void GenerateSet(string folderName, string pathToTests = @"..\..\Contrib", string metaPath = @"..\..\Contrib\NLTestToolkit\NLTest.Meta.xml") {
	var searchPattern = "*.test";
	var absFolderName = this.Host.ResolvePath(System.IO.Path.Combine(pathToTests, folderName));
	var testFiles = System.IO.Directory.GetFiles(absFolderName, searchPattern);
	var metaXDoc = XDocument.Load(this.Host.ResolvePath(metaPath));

	// Collect list of tests as a dictionary with file names as keys and corresponded categories as values
	var testsXElements = metaXDoc.XPathSelectElements("/nltest-metadata/categories/category/test");
	var tests = testsXElements.ToDictionary(x => @"test\" + x.Attribute("file").Value, x => ((XElement)x.Parent).Attribute("name").Value);

	// Collect ignore actions as a dictionary with categories as keys and reasons as values
	var ignoreXElements = metaXDoc.XPathSelectElements("/nltest-metadata/actions/ignore");
	var ignores = ignoreXElements.ToDictionary(x => x.Attribute("categories").Value, x => x.Attribute("reason").Value);

	// Collect extensibility variables as a dictionary
	var actionsXElements = metaXDoc.XPathSelectElements("/nltest-metadata/actions/variable");
	var providers = actionsXElements.Where(x => x.Attribute("varname").Value == "nledgerExtensionProvider").
		ToDictionary(x => x.Attribute("categories").Value, x => x.Attribute("value").Value);

	// Helper functions
	Func<string,bool> hasCategory = (fileName) => tests.ContainsKey(fileName);
	Func<string,string> getCategory = (fileName) => hasCategory(fileName) ? tests[fileName] : null;
	Func<string,bool> hasIgnoredReason = (fileName) => hasCategory(fileName) && ignores.ContainsKey(getCategory(fileName));
	Func<string,string> getIgnoredReason = (fileName) => hasIgnoredReason(fileName) ? ignores[getCategory(fileName)] : null;
	Func<string,bool> hasProviderName = (fileName) => hasCategory(fileName) && providers.ContainsKey(getCategory(fileName));
	Func<string,string> getProviderName = (fileName) => hasProviderName(fileName) ? "\"" + providers[getCategory(fileName)] + "\"" : String.Empty;
	Func<string,bool> isPython = (fileName) => getProviderName(fileName) == "\"python\"";

#>
// **********************************************************************************
// Copyright (c) 2015-2022, Dmitry Merzlyakov.  All rights reserved.
// Licensed under the FreeBSD Public License. See LICENSE file included with the distribution for details and disclaimer.
// 
// This file is part of NLedger that is a .Net port of C++ Ledger tool (ledger-cli.org). Original code is licensed under:
// Copyright (c) 2003-2022, John Wiegley.  All rights reserved.
// See LICENSE.LEDGER file included with the distribution for details and disclaimer.
// **********************************************************************************
using Xunit;
using System;
namespace NLedger.IntegrationTests
{
    public class TestSet_<#= folderName.Replace(@"\", "_") #>
    {
        public TestSet_<#= folderName.Replace(@"\", "_") #>()
        {
            Extensibility.Python.Platform.PythonConnector.Current.KeepAlive = false;
        }

<#+ foreach (var file in testFiles) { 
var shortFileName = System.IO.Path.GetFileName(file);
var methodName = System.IO.Path.GetFileNameWithoutExtension(shortFileName).Replace("-", "_");
var longFileName = folderName + @"\" + shortFileName; #>

<#+ if(!hasIgnoredReason(longFileName)) { #>        [<#= isPython(longFileName) ? "PythonFact" : "Fact" #>]<#+ } else { #>        [Fact(Skip="<#= getIgnoredReason(longFileName) #>")]<#+ } #>

        [Trait("Category", "Integration")]
        public void IntegrationTest_<#= folderName.Replace(@"\", "_") #>_<#= methodName #>()
        {
            new TestRunner(@"<#= folderName.Replace(@"\", "/") + @"/" + shortFileName #>").Run(<#= getProviderName(longFileName) #>);
        }

<#+ } #>
    }
}
<#+ } #>