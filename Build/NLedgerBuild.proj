<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="All">

  <PropertyGroup>
    
    <!-- Project file structure -->
    
    <ProjectRoot Condition=" '$(ProjectRoot)'=='' ">..\</ProjectRoot>
    <SourceRoot>$(ProjectRoot)Source\</SourceRoot>
    <BuildDir>$(ProjectRoot)Build\</BuildDir>
    <TestResultsDir>$(BuildDir)TestResults\</TestResultsDir>
    <CommonMarkDir>$(BuildDir)CommonMark.NET\</CommonMarkDir>
    <!-- Path to ProductInfo file -->
    <ProductInfoPath>$(SourceRoot)ProductInfo.xml</ProductInfoPath>
    <!-- Paths to test project assemblies separated by spaces -->
    <TestAssembliesNet48>$(SourceRoot)NLedger.Tests\bin\Release\net48\NLedger.Tests.dll $(SourceRoot)NLedger.IntegrationTests\bin\Release\net48\NLedger.IntegrationTests.dll $(SourceRoot)NLedger.Extensibility.Python.Tests\bin\Release\net48\NLedger.Extensibility.Python.Tests.dll</TestAssembliesNet48>
    <TestAssembliesNet6_0>$(SourceRoot)NLedger.Tests\bin\Release\net6.0\NLedger.Tests.dll $(SourceRoot)NLedger.IntegrationTests\bin\Release\net6.0\NLedger.IntegrationTests.dll $(SourceRoot)NLedger.Extensibility.Python.Tests\bin\Release\net6.0\NLedger.Extensibility.Python.Tests.dll</TestAssembliesNet6_0>
    <TestAssembliesNet8_0>$(SourceRoot)NLedger.Tests\bin\Release\net8.0\NLedger.Tests.dll $(SourceRoot)NLedger.IntegrationTests\bin\Release\net8.0\NLedger.IntegrationTests.dll $(SourceRoot)NLedger.Extensibility.Python.Tests\bin\Release\net8.0\NLedger.Extensibility.Python.Tests.dll</TestAssembliesNet8_0>

    <!-- Output file structure -->

    <OutputDir Condition=" '$(OutputDir)'=='' ">$(ProjectRoot)BuildOut\</OutputDir>
    <PackageDir>$(OutputDir)package\NLedger\</PackageDir>

    <!-- Paths to build tools -->
    
    <!-- Visual Studio Test Console location -->
    <VsTestConsolePath Condition=" '$(VsTestConsolePath)'=='' ">%VS140COMNTOOLS%..\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe</VsTestConsolePath>
    <!-- Powershell location -->
    <PowerShellExe Condition=" '$(PowerShellExe)'=='' ">%WINDIR%\System32\WindowsPowerShell\v1.0\powershell.exe</PowerShellExe>
  
    <!-- Properties -->
    
    <!-- Indicates whether current process has elevated permissions. If yes - IntegrationTests calls NGen to create a native image -->
    <Elevated Condition=" '$(Elevated)'=='' ">False</Elevated>

    <!-- Auto-generated build version parameters; they are populated by CheckLicensing target -->
    <ProductVersion></ProductVersion>			<!-- x.x         -->
    <VersionPrefix></VersionPrefix>			<!-- x.x.x       -->
    <SourceRevisionId></SourceRevisionId>               <!-- git commit  -->
    <VersionSuffix></VersionSuffix>                     <!-- beta/rc/etc         -->
    <BuildNumber></BuildNumber>                         <!-- Build autoincrement -->

</PropertyGroup>

  <Target Name="All">
    <CallTarget Targets="Build" />
    <CallTarget Targets="CodeTests" />
    <CallTarget Targets="Release" />
    <CallTarget Targets="IntegrationTests" />
    <CallTarget Targets="Package" />
    <CallTarget Targets="MSI" />
    <CallTarget Targets="Nuget" />
  </Target>

  <Target Name="Build" DependsOnTargets="GetProductVersion;CheckLicensing">
    <Message Text="Target : Build (building source code)"/>
    <Exec Command="dotnet restore" WorkingDirectory="$(SourceRoot)" />
    <MSBuild Projects="$(SourceRoot)NLedger.sln" Properties="Configuration=Release;VersionPrefix=$(VersionPrefix).$(BuildNumber);SourceRevisionId=$(SourceRevisionId)" />
  </Target>

  <Target Name="CodeTests" DependsOnTargets="Build;CheckOutputDir;GetPythonConnection">
    <Message Text="Target : CodeTests (executing all unit tests defined in code)"/>
    <Exec Command="&quot;$(VsTestConsolePath)&quot; $(TestAssembliesNet48) /Logger:trx /Platform:x64" />
    <Exec Command="&quot;$(VsTestConsolePath)&quot; $(TestAssembliesNet6_0) /Logger:trx /Platform:x64" />
    <Exec Command="&quot;$(VsTestConsolePath)&quot; $(TestAssembliesNet8_0) /Logger:trx /Platform:x64" />
    <!-- Copy trx files (s) to output folder -->
    <CreateItem Include="$(TestResultsDir)**\*.*">
      <Output TaskParameter="Include" ItemName="TestResultsFiles" />
    </CreateItem>
    <Copy SourceFiles="@(TestResultsFiles)" DestinationFiles="@(TestResultsFiles->'$(OutputDir)\%(RecursiveDir)%(Filename)%(Extension)')" />
    <!-- Remove test results folder -->
    <RemoveDir Directories="$(TestResultsDir)"/>
  </Target>

  <Target Name="PythonBuild" DependsOnTargets="Build;GetPythonConnection">
    <Message Text="Target : Build Python Module"/>
    <!-- Install PythonNet since it is needed for Python unit tests -->
    <Exec Command="&quot;$(PowerShellExe)&quot; -NonInteractive -executionpolicy Unrestricted -File &quot;$(BuildDir)..\Contrib\nledger-tools.ps1&quot; -command python-install-wheel" />
    <Exec Command="&quot;$(PowerShellExe)&quot; -NonInteractive -executionpolicy Unrestricted -File &quot;$(BuildDir)..\Contrib\nledger-tools.ps1&quot; -command python-install-pythonnet" />
    <Exec Command="&quot;$(PowerShellExe)&quot; -NonInteractive -executionpolicy Unrestricted -File &quot;$(SourceRoot)NLedger.Extensibility.Python.Module\build.ps1&quot; -test -build" />
    <Copy SourceFiles="$(ProjectRoot)Contrib\Python\ledger-$(VersionPrefix)-py3-none-any.whl" DestinationFiles="$(OutputDir)ledger-$(VersionPrefix)-py3-none-any.whl" />
  </Target>

  <Target Name="Release" DependsOnTargets="Build;PythonBuild">
    <Message Text="Target : Release (composing a package folder with release binaries)"/>
    <!-- Prepare a folder for package binaries -->
    <RemoveDir Directories="$(PackageDir)"/>
    <MakeDir Directories="$(PackageDir)"/>
    <!-- Add binaries (.Net Standard 2.0) -->
    <Copy SourceFiles="$(SourceRoot)NLedger\bin\Release\netstandard2.0\NLedger.dll" DestinationFiles="$(PackageDir)bin\netstandard2.0\NLedger.dll"  />
    <Copy SourceFiles="$(SourceRoot)NLedger.Extensibility.Python\bin\Release\netstandard2.0\NLedger.Extensibility.Python.dll" DestinationFiles="$(PackageDir)bin\netstandard2.0\NLedger.Extensibility.Python.dll"  />
    <Copy SourceFiles="$(SourceRoot)NLedger.Extensibility.Python\bin\Release\netstandard2.0\Python.Runtime.dll" DestinationFiles="$(PackageDir)bin\netstandard2.0\Python.Runtime.dll"  />
    <!-- Add binaries (.Net Framework 4.8) -->
    <Copy SourceFiles="$(SourceRoot)NLedger.CLI\bin\Release\net48\NLedger.dll" DestinationFiles="$(PackageDir)bin\net48\NLedger.dll"  />
    <Copy SourceFiles="$(SourceRoot)NLedger.CLI\bin\Release\net48\NLedger-cli.exe" DestinationFiles="$(PackageDir)bin\net48\NLedger-cli.exe"  />
    <Copy SourceFiles="$(SourceRoot)NLedger.CLI\bin\Release\net48\NLedger-cli.exe.config" DestinationFiles="$(PackageDir)bin\net48\NLedger-cli.exe.config"  />
    <Copy SourceFiles="$(SourceRoot)NLedger.CLI\bin\Release\net48\NLedger.Extensibility.Python.dll" DestinationFiles="$(PackageDir)bin\net48\NLedger.Extensibility.Python.dll"  />
    <Copy SourceFiles="$(SourceRoot)NLedger.CLI\bin\Release\net48\Python.Runtime.dll" DestinationFiles="$(PackageDir)bin\net48\Python.Runtime.dll"  />
    <Copy SourceFiles="$(ProjectRoot)Contrib\ledger.1.html" DestinationFiles="$(PackageDir)bin\net48\ledger.1.html"  />
    <!-- Add binaries (.Net 6.0) -->
    <Copy SourceFiles="$(SourceRoot)NLedger.CLI\bin\Release\net6.0\NLedger.dll" DestinationFiles="$(PackageDir)bin\net6.0\NLedger.dll"  />
    <Copy SourceFiles="$(SourceRoot)NLedger.CLI\bin\Release\net6.0\NLedger-cli.exe" DestinationFiles="$(PackageDir)bin\net6.0\NLedger-cli.exe"  />
    <Copy SourceFiles="$(SourceRoot)NLedger.CLI\bin\Release\net6.0\NLedger-cli.dll" DestinationFiles="$(PackageDir)bin\net6.0\NLedger-cli.dll"  />
    <Copy SourceFiles="$(SourceRoot)NLedger.CLI\bin\Release\net6.0\NLedger-cli.dll.config" DestinationFiles="$(PackageDir)bin\net6.0\NLedger-cli.dll.config"  />
    <Copy SourceFiles="$(SourceRoot)NLedger.CLI\bin\Release\net6.0\NLedger-cli.deps.json" DestinationFiles="$(PackageDir)bin\net6.0\NLedger-cli.deps.json"  />
    <Copy SourceFiles="$(SourceRoot)NLedger.CLI\bin\Release\net6.0\NLedger-cli.runtimeconfig.json" DestinationFiles="$(PackageDir)bin\net6.0\NLedger-cli.runtimeconfig.json"  />
    <Copy SourceFiles="$(SourceRoot)NLedger.CLI\bin\Release\net6.0\NLedger.Extensibility.Python.dll" DestinationFiles="$(PackageDir)bin\net6.0\NLedger.Extensibility.Python.dll"  />
    <Copy SourceFiles="$(SourceRoot)NLedger.CLI\bin\Release\net6.0\Python.Runtime.dll" DestinationFiles="$(PackageDir)bin\net6.0\Python.Runtime.dll"  />
    <Copy SourceFiles="$(SourceRoot)NLedger.CLI\bin\Release\net6.0\System.Security.Permissions.dll" DestinationFiles="$(PackageDir)bin\net6.0\System.Security.Permissions.dll"  />
    <Copy SourceFiles="$(ProjectRoot)Contrib\ledger.1.html" DestinationFiles="$(PackageDir)bin\net6.0\ledger.1.html"  />
    <!-- Add binaries (.Net 8.0) -->


    <!-- Add Contrib files -->
    <CreateItem Include="$(ProjectRoot)Contrib\**\*.*" >
      <Output TaskParameter="Include" ItemName="ContribFiles" />
    </CreateItem>
    <Copy SourceFiles="@(ContribFiles)" DestinationFiles="@(ContribFiles->'$(PackageDir)\%(RecursiveDir)%(Filename)%(Extension)')" />
    <!-- Add licenses -->
    <Copy SourceFiles="$(ProjectRoot)LICENSE" DestinationFiles="$(PackageDir)\LICENSE"  />
    <Copy SourceFiles="$(ProjectRoot)LICENSE.RTF" DestinationFiles="$(PackageDir)\LICENSE.RTF"  />
    <Copy SourceFiles="$(ProjectRoot)LICENSE.LEDGER" DestinationFiles="$(PackageDir)\LICENSE.LEDGER"  />
    <!-- Add NLedger readme, documentation and release notes -->
    <Exec Command="&quot;$(PowerShellExe)&quot; -NonInteractive -executionpolicy Unrestricted -File &quot;$(CommonMarkDir)CommonMark.ps1&quot; -inputFileName &quot;..\..\README.md&quot; -outputFileName &quot;$(PackageDir)\README.html&quot;" />
    <Exec Command="&quot;$(PowerShellExe)&quot; -NonInteractive -executionpolicy Unrestricted -File &quot;$(CommonMarkDir)CommonMark.ps1&quot; -inputFileName &quot;..\..\CHANGELOG.md&quot; -outputFileName &quot;$(PackageDir)\CHANGELOG.html&quot;" />
    <Exec Command="&quot;$(PowerShellExe)&quot; -NonInteractive -executionpolicy Unrestricted -File &quot;$(CommonMarkDir)CommonMark.ps1&quot; -inputFileName &quot;..\..\nledger.md&quot; -outputFileName &quot;$(PackageDir)\nledger.html&quot;" />
  </Target>

  <Target Name="IntegrationTests" DependsOnTargets="Release">
    <Message Text="Target : IntegrationTests (executing all Ledger tests in NLTest Toolkit)"/>
    <!-- Call NGEN to create a native image to speed up the tests. Requires elevated permissions -->
    <Exec Condition=" '$(Elevated)'=='True' " Command="&quot;$(PowerShellExe)&quot; -NonInteractive -executionpolicy Unrestricted -Command &quot;Import-Module $(PackageDir)Install\SysNGen.psm1 ; Add-NGenImage $(PackageDir)bin\net472\NLedger-cli.exe&quot;" />
    <!-- Run all integration tests -->
    <Exec Command="&quot;$(PowerShellExe)&quot; -NonInteractive -executionpolicy Unrestricted -File &quot;$(PackageDir)NLTestToolkit\NLTest.ps1&quot; -nledgerExePath $(PackageDir)bin\net472\NLedger-cli.exe -htmlReport -reportFileName &quot;$(OutputDir)NLTest.NetFramework.LastTestResults&quot;" />
    <Exec Command="&quot;$(PowerShellExe)&quot; -NonInteractive -executionpolicy Unrestricted -File &quot;$(PackageDir)NLTestToolkit\NLTest.ps1&quot; -nledgerExePath $(PackageDir)bin\netcoreapp3.1\NLedger-cli.exe -htmlReport -reportFileName &quot;$(OutputDir)NLTest.NetCore.LastTestResults&quot;" />
    <!-- Remove the native image from the cache -->
    <Exec Condition=" '$(Elevated)'=='True' " Command="&quot;$(PowerShellExe)&quot; -NonInteractive -executionpolicy Unrestricted -Command &quot;Import-Module $(PackageDir)Install\SysNGen.psm1 ; Remove-NGenImage $(PackageDir)bin\net472\NLedger-cli.exe&quot;" />
    <!-- Remove PyCache files created after running tests -->
    <Exec Command="&quot;$(PowerShellExe)&quot; -NonInteractive -executionpolicy Unrestricted -Command &quot;get-childitem -LiteralPath $(PackageDir)test -Directory -Recurse | Where-Object {$_.Name -eq '__pycache__'} | Remove-Item -Force -Recurse&quot;" />
  </Target>

  <Target Name="Package" DependsOnTargets="Release">
    <Message Text="Target : Package (creating a zip package)"/>
    <Delete Files="$(OutputDir)NLedger-v$(ProductVersion).zip" />
    <ZipDir ZipFileName="$(OutputDir)NLedger-v$(ProductVersion).zip" DirectoryName="$(PackageDir).." />
  </Target>

  <Target Name="MSI" DependsOnTargets="Package;CheckWix">
    <Message Text="Target : MSI (creating a wix installer)"/>
    <RemoveDir Directories="$(BuildDir)NLedgerWix\bin;$(BuildDir)NLedgerWix\obj" />  
    <Delete Files="$(BuildDir)NLedgerWix\" />
    <MSBuild Projects="$(BuildDir)NLedgerWix\NLedger.wixproj" Properties="Configuration=Release;PackageFolder=$(PackageDir)..\" />    
    <Copy SourceFiles="$(BuildDir)NLedgerWix\bin\Release\en-us\NLedger.msi" DestinationFiles="$(OutputDir)NLedger-v$(ProductVersion).msi"  />
  </Target>

  <Target Name="Nuget" DependsOnTargets="Build">
    <Message Text="Target : Create NuGet package"/>
    <Exec Command="dotnet pack --configuration Release --no-build" WorkingDirectory="$(SourceRoot)" />
    <Copy SourceFiles="$(SourceRoot)NLedger\bin\Release\NLedger.$(VersionPrefix)-$(VersionSuffix).nupkg" DestinationFiles="$(OutputDir)NLedger.$(VersionPrefix)-$(VersionSuffix).nupkg" />
    <Copy SourceFiles="$(SourceRoot)NLedger.Extensibility.Python\bin\Release\NLedger.Extensibility.Python.$(VersionPrefix)-$(VersionSuffix).nupkg" DestinationFiles="$(OutputDir)NLedger.Extensibility.Python.$(VersionPrefix)-$(VersionSuffix).nupkg" />
  </Target>

  <!-- Technical task - check output folder -->
  <Target Name="CheckOutputDir">
    <Message Text="Create output folder if it does not exist" />
    <MakeDir Directories="$(OutputDir)"/>
  </Target>

  <!-- Technical task - checking version and licensing info in all source files -->
  <Target Name="CheckLicensing">
    <Message Text="Checking version and licensing info in all source code files" />
    <Message Text="NOTE: if this task fails, execute ProductInfoUpdate.cmd to actualize data and observe modifications in a source control system." />
    <Exec Command="&quot;$(PowerShellExe)&quot; -NonInteractive -executionpolicy Unrestricted -Command &quot;Import-Module $(BuildDir)ProductInfo.psm1 ; Test-VersionInfoAndLicenseNotes&quot;" />
  </Target>

  <!-- Technical task - configure Python connection -->
  <Target Name="GetPythonConnection">
    <Message Text="Configuring Python connection file" />
    <Message Text="NOTE: if this task fails, configure Python connection manually (command 'python-connect' in 'nledger-tools.ps1')." />
    <Exec Command="&quot;$(PowerShellExe)&quot; -NonInteractive -executionpolicy Unrestricted -File &quot;$(BuildDir)..\Contrib\nledger-tools.ps1&quot; -command python-connect" />
  </Target>

  <!-- Technical task - checking the content of Wix configuration files -->
  <Target Name="CheckWix">
    <Message Text="Checking the content of Wix configuration files" />
    <Message Text="NOTE: if this task fails, verify the content of Wix configuration files. Refer to NLedgerWix\WixHelpers.ps1 (ValidateDirectoryContent) for details." />
    <Exec Command="&quot;$(PowerShellExe)&quot; -NonInteractive -executionpolicy Unrestricted -File &quot;$(BuildDir)NLedgerWix\WixHelpers.ps1&quot; -verify -packageFolder &quot;$(PackageDir)\..\\&quot;" />
  </Target>
  
  <!-- Technical task: getting a product version from Product Info file -->
  <Target Name="GetProductVersion">
    <Message Text="Get version information from VersionInfo.xml" />
    <PropertyGroup>
       <OutputOfProductInfoUpdate></OutputOfProductInfoUpdate>
    </PropertyGroup>
    <Exec Command="&quot;$(PowerShellExe)&quot; -NonInteractive -executionpolicy Unrestricted -Command &quot;Import-Module $(BuildDir)ProductInfo.psm1 ; Get-VersionInfoArray&quot;" ConsoleToMSBuild="true" >
        <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfProductInfoUpdate" />
    </Exec>
    <CreateProperty Value="$(OutputOfProductInfoUpdate.Split(';')[0])">
        <Output PropertyName="VersionPrefix" TaskParameter="Value"/>
    </CreateProperty>
    <CreateProperty Value="$(OutputOfProductInfoUpdate.Split(';')[1])">
        <Output PropertyName="SourceRevisionId" TaskParameter="Value"/>
    </CreateProperty>
    <CreateProperty Value="$(OutputOfProductInfoUpdate.Split(';')[2])">
        <Output PropertyName="VersionSuffix" TaskParameter="Value"/>
    </CreateProperty>
    <CreateProperty Value="$(OutputOfProductInfoUpdate.Split(';')[3])">
        <Output PropertyName="BuildNumber" TaskParameter="Value"/>
    </CreateProperty>
    <CreateProperty Value="$(OutputOfProductInfoUpdate.Split(';')[4])">
        <Output PropertyName="ProductVersion" TaskParameter="Value"/>
    </CreateProperty>
    <Message Text="Received version info: ProductVersion='$(ProductVersion)'; VersionPrefix='$(VersionPrefix)'; SourceRevisionId='$(SourceRevisionId)'; VersionSuffix='$(VersionSuffix)'; BuildNumber='$(BuildNumber)'"/>
  </Target>

  <!-- Technical task: create a zip file -->
  <UsingTask TaskName="ZipDir" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <ZipFileName ParameterType="System.String" Required="true" />
      <DirectoryName ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression.FileSystem" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
      try
      {
        Log.LogMessage(string.Format("Zipping Directory {0} to {1}", DirectoryName, ZipFileName));
        ZipFile.CreateFromDirectory( DirectoryName, ZipFileName );
        return true;
      }
      catch(Exception ex)
      {
        Log.LogErrorFromException(ex);
        return false;
      }
    ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>